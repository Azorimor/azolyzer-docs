{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Azolyzer Documentation This is the official documentation. Currently the documentation is work in progress.","title":"Home"},{"location":"#azolyzer-documentation","text":"This is the official documentation. Currently the documentation is work in progress.","title":"Azolyzer Documentation"},{"location":"contribute/bot/","text":"Contribute to the bot itself Getting started 1) In oder to start programming and contributing you need to fork the repository of the bot on github and then download this repository. # Using ssh git clone git@github.com:<GITHUB USERNAME>/azolyzer.git # Using https git clone https://github.com/<GITHUB USERNAME>/azolyzer.git 2) Open the folder you just cloned with your favorite Terminal and install the dependencies. # For the backend cd backend npm install # For the frontend (Web interface) cd angular-frontend npm install 3) Open the folder in an editor. Now copy the file named .env.example and name the copied file .env . Now you need to change some values here. Currently only the value for the DISCORD_TOKEN needs to be set. Navigate to the discord developer portal and register an application. Then you can change your application to a bot application and copy the token of the bot into this .env file. 4) Now you need to setup the database for development. This is currently done by using the default docker-compose.yml file. You need to have docker and docker-compose installed on your machine. # Inside the backend folder run docker-compose up -d 5) Now the bot can be started for development by running the following commands. # For the backend in the backend folder npm run start:watch # For the frontend in the angular-frontend folder ng serve 6) If you want you probably should install the angular-cli globally aswell, if you are working on the frontend. If your working on the backend and want to make changes to the database it is also recommended to install the typeorm-cli globally. Visit the official documentations for further informations. 7) After changes are made, you can commit and push your changes back to github and then create a pull request to the official repository on the develop branch.","title":"Bot"},{"location":"contribute/bot/#contribute-to-the-bot-itself","text":"","title":"Contribute to the bot itself"},{"location":"contribute/bot/#getting-started","text":"1) In oder to start programming and contributing you need to fork the repository of the bot on github and then download this repository. # Using ssh git clone git@github.com:<GITHUB USERNAME>/azolyzer.git # Using https git clone https://github.com/<GITHUB USERNAME>/azolyzer.git 2) Open the folder you just cloned with your favorite Terminal and install the dependencies. # For the backend cd backend npm install # For the frontend (Web interface) cd angular-frontend npm install 3) Open the folder in an editor. Now copy the file named .env.example and name the copied file .env . Now you need to change some values here. Currently only the value for the DISCORD_TOKEN needs to be set. Navigate to the discord developer portal and register an application. Then you can change your application to a bot application and copy the token of the bot into this .env file. 4) Now you need to setup the database for development. This is currently done by using the default docker-compose.yml file. You need to have docker and docker-compose installed on your machine. # Inside the backend folder run docker-compose up -d 5) Now the bot can be started for development by running the following commands. # For the backend in the backend folder npm run start:watch # For the frontend in the angular-frontend folder ng serve 6) If you want you probably should install the angular-cli globally aswell, if you are working on the frontend. If your working on the backend and want to make changes to the database it is also recommended to install the typeorm-cli globally. Visit the official documentations for further informations. 7) After changes are made, you can commit and push your changes back to github and then create a pull request to the official repository on the develop branch.","title":"Getting started"},{"location":"contribute/docs/","text":"Contribute to this documentation This documentation is build by using mkdocs.org . Visit the official site for their documentation. On top of that, a material theme is used. How to get started 1) Clone Repository First fork the repository for the documentation and then download the forked repository. # Using ssh git clone git@github.com:<GITHUB USERNAME>/azolyzer-docs.git # Using https git clone https://github.com/<GITHUB USERNAME>/azolyzer-docs.git 2) Install mkdocs and the material theme. As mentioned above, visit the official documentation for more detail. You need to make sure, Python 3.x and pip is installed on your computer. Not every Python version is supported today. Now you can install mkdocs and the material theme. pip install mkdocs pip install mkdocs-material For more information about the used material theme, visit the documentation . 3) After changes are made, you can commit and push your changes back to github and then create a pull request to the official repository on the develop branch. Commands mkdocs serve - Start the live-reloading docs server. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Docs"},{"location":"contribute/docs/#contribute-to-this-documentation","text":"This documentation is build by using mkdocs.org . Visit the official site for their documentation. On top of that, a material theme is used.","title":"Contribute to this documentation"},{"location":"contribute/docs/#how-to-get-started","text":"1) Clone Repository First fork the repository for the documentation and then download the forked repository. # Using ssh git clone git@github.com:<GITHUB USERNAME>/azolyzer-docs.git # Using https git clone https://github.com/<GITHUB USERNAME>/azolyzer-docs.git 2) Install mkdocs and the material theme. As mentioned above, visit the official documentation for more detail. You need to make sure, Python 3.x and pip is installed on your computer. Not every Python version is supported today. Now you can install mkdocs and the material theme. pip install mkdocs pip install mkdocs-material For more information about the used material theme, visit the documentation . 3) After changes are made, you can commit and push your changes back to github and then create a pull request to the official repository on the develop branch.","title":"How to get started"},{"location":"contribute/docs/#commands","text":"mkdocs serve - Start the live-reloading docs server. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"contribute/docs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"self-hosting/","text":"About self hosting the bot The bot is designed in a way to be easy deployable by anybody for a small amount (=less than 50) of discord servers. Legal You are allowed to host the bot yourself for a small amount of discord servers, but you are not allowed to host the bot for more than 50 servers.","title":"Information"},{"location":"self-hosting/#about-self-hosting-the-bot","text":"The bot is designed in a way to be easy deployable by anybody for a small amount (=less than 50) of discord servers.","title":"About self hosting the bot"},{"location":"self-hosting/#legal","text":"You are allowed to host the bot yourself for a small amount of discord servers, but you are not allowed to host the bot for more than 50 servers.","title":"Legal"},{"location":"self-hosting/deploy/","text":"How to deploy Azolyzer The official way of deploying Azolyzer is by using docker and docker-compose . Docker-Compose In order to deploy Azolyzer by using the recommended way, you need to have docker and docker-compose installed on the machine, on which azolyzer will run. 1) First of all you need to get the docker-compose.yml file from the Azolyzer Github repository . Just download this file or copy the content of the file to a file named docker-compose.yml on the machine. 2) Now you need to edit some of the enviroment variabled in that file to fit your needs. You can see more information on this topic here . 3) After that open a terminal in the same folder, where this file is located and run the command: docker-compose up -d Kubernetes The publicly hosted instance of Azolyzer is deployed using kubernetes. This topic will not be mentioned in the documentation, because you should not deploy a instance for too many servers, but if you know what you are doing, you can use kubernetes related code, which is also available on the Azolyzer Github repository .","title":"Deploy"},{"location":"self-hosting/deploy/#how-to-deploy-azolyzer","text":"The official way of deploying Azolyzer is by using docker and docker-compose .","title":"How to deploy Azolyzer"},{"location":"self-hosting/deploy/#docker-compose","text":"In order to deploy Azolyzer by using the recommended way, you need to have docker and docker-compose installed on the machine, on which azolyzer will run. 1) First of all you need to get the docker-compose.yml file from the Azolyzer Github repository . Just download this file or copy the content of the file to a file named docker-compose.yml on the machine. 2) Now you need to edit some of the enviroment variabled in that file to fit your needs. You can see more information on this topic here . 3) After that open a terminal in the same folder, where this file is located and run the command: docker-compose up -d","title":"Docker-Compose"},{"location":"self-hosting/deploy/#kubernetes","text":"The publicly hosted instance of Azolyzer is deployed using kubernetes. This topic will not be mentioned in the documentation, because you should not deploy a instance for too many servers, but if you know what you are doing, you can use kubernetes related code, which is also available on the Azolyzer Github repository .","title":"Kubernetes"},{"location":"self-hosting/environment/","text":"Currently nothing to see here","title":"Environment"}]}